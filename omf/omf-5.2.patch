diff -Nur omf-5.2.clean/install.pl omf-5.2/install.pl
--- omf-5.2.clean/install.pl	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/install.pl	2009-11-28 18:00:23.000000000 -0600
@@ -0,0 +1,78 @@
+#!/usr/bin/perl
+#
+# A perl script used to ease development testing
+#
+
+use strict;
+use warnings;
+
+my $OMF_HOST_ROOT = "/usr/lib/ruby/1.8";
+my $OMF_DEV_ROOT = "ruby";
+
+my $AGG = "omf-aggmgr";
+my $COMM = "omf-common";
+my $EXP = "omf-expctl";
+
+my $USAGE = <<USAGE;
+Usage: $0 <$AGG|$COMM|$EXP> [test]
+USAGE
+
+die($USAGE) if( @ARGV < 1 || @ARGV > 2 );
+
+my $PKG = $ARGV[0];
+
+if( $PKG !~ /^($AGG|$COMM|$EXP)$/ ) {
+    die($USAGE);
+}
+
+my $TEST = 0;
+if( @ARGV == 2 ) {
+    $TEST = 1;
+    print "TESTING---NOT COPYING\n";
+}
+
+# Special case for expctl
+my %files = ();
+if( $PKG eq $EXP ) {
+    my $hash_ref = &diffFiles("$OMF_HOST_ROOT/$EXP.rb",
+	"$EXP/$OMF_DEV_ROOT/$EXP.rb");
+    %files = %{ $hash_ref };
+}
+
+my $tmp_ref = &diffFiles("$OMF_HOST_ROOT/$PKG/",
+ "$PKG/$OMF_DEV_ROOT/$PKG/");
+
+foreach my $key (keys %{ $tmp_ref } ) {
+    print "sudo cp -f $key $tmp_ref->{$key}\n";
+    if( !$TEST ) {
+	print `sudo cp -f $key $tmp_ref->{$key}`;
+    }
+}
+
+print "!!! Remember to restart omf-aggmgr (/etc/init.d/omf-aggmgr restart)\n";
+
+sub diffFiles {
+    my $orig = $_[0];
+    my $new = $_[1];
+
+    my %ret = ();
+
+    print "diff -qr $orig $new\n";
+    my @lines = `diff -qr $orig $new`;
+    foreach my $line (@lines) {
+	chomp $line;
+        if( $line =~ /^Files/ ) {
+	    # line = "Files ... and ... differ"
+	    my @fields = split(/ /, $line);
+
+	    next if( @fields != 5 );
+
+	    my $dest = $fields[1];
+	    my $src = $fields[3];
+
+	    $ret{$src} = $dest;
+	}
+    }
+
+    return \%ret;
+}
diff -Nur omf-5.2.clean/Makefile omf-5.2/Makefile
--- omf-5.2.clean/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/Makefile	2009-12-10 20:39:12.000000000 -0600
@@ -0,0 +1,29 @@
+
+#
+# A Makefile to build the debian packages
+#
+
+default:
+
+debs: aggmgr expctl common resctl
+
+aggmgr:
+	cd omf-aggmgr && debuild -i -us -uc -b
+
+expctl:
+	cd omf-expctl && debuild -i -us -uc -b
+
+common:
+	cd omf-common && debuild -i -us -uc -b
+
+resctl:
+	cd omf-resctl && debuild -i -us -uc -b
+
+.PHONY: clean
+
+clean:
+	rm -f *.deb *.build *.changes
+	cd omf-resctl && dh_clean
+	cd omf-expctl && dh_clean
+	cd omf-aggmgr && dh_clean
+	cd omf-common && dh_clean
diff -Nur omf-5.2.clean/omf-aggmgr/etc/omf-aggmgr/available/inventory.yaml.wisc omf-5.2/omf-aggmgr/etc/omf-aggmgr/available/inventory.yaml.wisc
--- omf-5.2.clean/omf-aggmgr/etc/omf-aggmgr/available/inventory.yaml.wisc	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/omf-aggmgr/etc/omf-aggmgr/available/inventory.yaml.wisc	2009-12-05 22:54:35.000000000 -0600
@@ -0,0 +1,25 @@
+# NOTE: use only 'spaces' to indent !
+# ('tab' indents are not supported by the ruby yaml parser used to read this file)
+#
+# This is the Config file for the Inventory GridService on the NICTA platform
+#
+---
+inventory:
+
+  testbed:
+    default:
+      # Name of the Database Server
+      host: localhost
+      # Username and password to access the database server
+      user: omf
+      password: omf
+      # Name of the database to use
+      database: inventory
+      # IP/Hostname of the XMPP server
+      xmpp_server: 192.168.3.1
+      # The discovery user -- listens for new DISCOVER messages from nodes
+      discover_user: discoverd
+      # The password for the user
+      discover_pass: 123
+      # The already created Pub/Sub node used for discovery
+      discover_pubsub_node: discoverd
diff -Nur omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/listPubSubNodes.rb omf-5.2/omf-aggmgr/ruby/omf-aggmgr/listPubSubNodes.rb
--- omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/listPubSubNodes.rb	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/omf-aggmgr/ruby/omf-aggmgr/listPubSubNodes.rb	2009-12-05 13:09:22.000000000 -0600
@@ -0,0 +1,38 @@
+#
+# = listPubSubNodes.rb
+#
+# Connects to a XMPP server and lists all the available Pub/Sub nodes
+#
+
+require 'omf-common/omfPubSubService'
+require 'xmpp4r/pubsub/helper/nodebrowser'
+
+USAGE = <<USAGE
+USAGE: #{$0} xmppIP
+USAGE
+
+begin
+    if (ARGV.size == 0) 
+	puts USAGE
+	exit 1
+    end
+
+    xmppIP = ARGV[0]
+    userJID = "discoverd@#{xmppIP}"
+    password = "123"
+
+    clientHelper = Jabber::Client.new(userJID)
+    clientHelper.connect(xmppIP)
+    clientHelper.auth(password)
+    clientHelper.send(Jabber::Presence.new)
+
+    nb = Jabber::PubSub::NodeBrowser.new(clientHelper)
+
+    domainjid = Jabber::JID.new(nil, "pubsub.#{xmppIP}")
+
+    nodes = nb.nodes(domainjid)
+
+    for name in nodes do
+	puts "Node: #{name}"
+    end
+end
diff -Nur omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/ogs_cmcStub/cmcStub.rb omf-5.2/omf-aggmgr/ruby/omf-aggmgr/ogs_cmcStub/cmcStub.rb
--- omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/ogs_cmcStub/cmcStub.rb	2009-09-15 23:13:03.000000000 -0500
+++ omf-5.2/omf-aggmgr/ruby/omf-aggmgr/ogs_cmcStub/cmcStub.rb	2009-11-05 23:15:18.000000000 -0600
@@ -89,10 +89,6 @@
   s_param :y, 'ycoord', 'y coordinates of location'
   s_param :domain, 'domain', 'domain for request.'
   service 'reset' do |req, res|
-    x = getParam(req, 'x')
-    y = getParam(req, 'y')
-    domain = getParam(req, 'domain')
-    reboot(x,y,domain,req)
     self.responseOK(res)
   end
 
@@ -100,38 +96,22 @@
   # Implement 'offHard' service using the 'service' method of AbstractService
   # In this Stub CMC, this will always return HTTP OK
   # 
-  # NOTE: 
-  # At NICTA, we do not have the CM card operational on our nodes yet...
-  # We use the NA's 'REBOOT' command to implement a 'offHard'
-  #
   s_info 'Switch off a node HARD (immediately) at a specific coordinate'
   s_param :x, 'xcoord', 'x coordinates of location'
   s_param :y, 'ycoord', 'y coordinates of location'
   s_param :domain, 'domain', 'domain for request.'
   service 'offHard' do |req, res|
-    x = getParam(req, 'x')
-    y = getParam(req, 'y')
-    domain = getParam(req, 'domain')
-    reboot(x,y,domain,req)
     self.responseOK(res)
   end
   
   #
   # Implement 'offSoft' service using the 'service' method of AbstractService
   #
-  # NOTE: 
-  # At NICTA, we do not have the CM card operational on our nodes yet...
-  # We use the NA's 'REBOOT' command to implement a 'offSoft'
-  #
   s_info 'Switch off a node SOFT (execute halt) at a specific coordinate'
   s_param :x, 'xcoord', 'x coordinates of location'
   s_param :y, 'ycoord', 'y coordinates of location'
   s_param :domain, 'domain', 'domain for request.'
   service 'offSoft' do |req, res|
-    x = getParam(req, 'x')
-    y = getParam(req, 'y')
-    domain = getParam(req, 'domain')
-    reboot(x,y,domain,req)
     self.responseOK(res)
   end
 
@@ -147,34 +127,15 @@
   #
   # Implement 'allOffSoft' service using the 'service' method of AbstractService
   #
-  # NOTE: 
-  # At NICTA, we do not have the CM card operational on our nodes yet...
-  # We use the NA's 'REBOOT' command to implement a 'allOffSoft'
-  #
   s_info 'Switch off ALL nodes SOFT (execute halt)'
   s_param :domain, '[domain]', 'domain for request.'
   service 'allOffSoft' do |req, res|
-    domain = getParam(req, 'domain')
-    tb = getTestbedConfig(req, @@config)
-    inventoryURL = tb['inventory_url']
-    nodes = listAllNodes(inventoryURL, domain)
-    nodes.each { |n|
-      x = n[0]; y = n[1]
-      reboot(x,y,domain,req)
-    }
     self.responseOK(res)
   end
 
   #
   # Implement 'getAllNodes' service using the 'service' method of AbstractService
   #
-  # NOTE: 
-  # At NICTA, we do not have the CM card operational on our nodes yet...
-  # We use the information in the CMC Stub config file to implement a 'getAllNodes'
-  #
-  # TODO: if still not CM card operational after a while, then this should 
-  # really use information from the Inventory instead
-  #
   s_info 'Returns a list of all nodes in the testbed'
   s_param :domain, '[domain]', 'domain for request.'
   service 'getAllNodes' do |req, res|
@@ -189,13 +150,6 @@
   #
   # Implement 'allStatus' service using the 'service' method of AbstractService
   #
-  # NOTE: 
-  # At NICTA, we do not have the CM card operational on our nodes yet...
-  # We use the information in the CMC Stub config file to implement a 'allStatus'
-  #
-  # TODO: if still not CM card operational after a while, then this should 
-  # really use information from the Inventory instead
-  #
   s_info 'Returns the status of all nodes in the testbed'
   s_param :domain, '[domain]', 'domain for request.'
   service 'allStatus' do |req, res|
diff -Nur omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/discoveryCommunicator.rb omf-5.2/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/discoveryCommunicator.rb
--- omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/discoveryCommunicator.rb	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/discoveryCommunicator.rb	2009-12-07 01:10:51.000000000 -0600
@@ -0,0 +1,221 @@
+#
+# = discoverCommunicator.rb
+#
+# A Publish/Subscribe Communicator to discover Control IPs for their
+# nodes and their corresponding coordinates.
+#
+# Connects to the XMPP server and waits for nodes to report their control IPs
+#
+# This class is more or less modeled after the XmppCommunicator class in omf-expctl
+# (the definition of that class will provide more implementation information)
+#
+
+require 'omf-common/omfPubSubService'
+
+class DiscoverPubSubCommunicator < MObject
+    DOMAIN = "Domain"
+    SYSTEM = "System"
+    INV_DOMAIN = "teratorn"
+
+    include Singleton
+    @@instantiated = false
+    @@user = nil
+    @@pass = nil
+    @@pubsub_node = nil
+    @@db_host = nil
+    @@db_user = nil
+    @@db_pass = nil
+    @@db = nil
+    @@inventory = nil
+
+    #
+    # Return the Instantiation
+    def DiscoverPubSubCommunicator.instantiated?
+	return @@instantiated
+    end
+
+    def initialize ()
+	@@service = nil
+	@@instantiated = true
+
+	@queue = Queue.new
+	Thread.new {
+	    while event = @queue.pop
+		execute_command(event)
+	    end
+	}
+    end
+
+    def start(params)
+	@@xmppIP = params['xmpp_server']
+	@@user = params['discover_user']
+	@@pass = params['discover_pass']
+	@@pubsub_node = params['discover_pubsub_node']
+	@@db_host = params['host']
+	@@db_user = params['user']
+	@@db_pass = params['password']
+	@@db = params['database']
+
+	# Create the Service Helper to interact with the PubSub Server
+	begin
+	    @@service = OmfPubSubService.new(@@user, @@pass, @@xmppIP)
+
+	    @@service.add_event_callback { |event|
+		@queue << event
+	    }
+
+	    @@service.join_pubsub_node("/#{DOMAIN}/#{SYSTEM}/#{@@user}")
+	rescue Exception => ex
+	    error "Failed to create ServiceHelper for PubSub Server '#{@@xmppIP}' - Error: '#{ex}'"
+	end
+
+	# keep connection to the PubSub server alive 
+	Thread.new do
+	    while true do
+		sleep 60*60
+		debug("Sending a ping to the XMPP server (keepalive)")
+		@@service.ping
+	    end
+	    @@service.quit()
+	end
+    end
+
+    #
+    # Process DISCOVER commands
+    # 
+    # After receiving a DISCOVER command:
+    # 1) Update the MySQL database with the new association between the control
+    # IP and the node coordinates 
+    #
+    # 2) Reply to the node, as it should wait for a response before continuing
+    #
+    # The format of the DISCOVER messages is:
+    #
+    # DISCOVER <nodeIdentifier> <nodeIP>
+    #
+    # e.g. DISCOVER 00:0c:29:60:09:d8 192.168.3.128
+    #
+    # And the response:
+    #
+    # OK <DISCOVER message item id> <nodeIdentifier> <nodeIP>
+    #
+    # e.g. OK 1234 00:0c:29:60:09:d8 192.168.3.128
+    #
+    # - event:: [Jabber::PubSub::Event]
+    #
+    def execute_command (event)
+	# Extract the Message from the PubSub Event
+	begin
+	    message = event.first_element("items")\
+		           .first_element("item")\
+			   .first_element("message")\
+			   .first_element("body").text
+	    if message.nil?
+		return
+	    end
+	rescue Exception => ex
+	    return
+	end
+
+	# Parse the Message to extract the Command
+	argArray = message.split(' ')
+	if (argArray.length < 1)
+	  error "Message too short! '#{message}'"
+	  return
+	end
+	 
+	# Process the command, if it is valid   
+	incomingPubSubNode = event.first_element("items").attributes['node']
+	if (argArray[0].upcase == "DISCOVER") 
+	    debug "Received on '#{incomingPubSubNode}' - msg: '#{message}'"
+	    begin
+		# Update the database
+		if (@@inventory == nil)
+		    @@inventory = MySQLInventory.new(@@db_host, @@db_user, @@db_pass, @@db);
+		end
+
+		# First, get the old IP of the node
+		ips = []
+		@@inventory.runQuery("SELECT ip FROM nodeToIP WHERE identifier='#{argArray[1]}';") {|result|
+		    ips << result
+		}
+
+		if (ips.size != 0)
+		    if ( ips[0] != argArray[2] ) 
+			# Update the nodeToIP table with the new IP address
+			if (ips.size > 1) 
+			    # Delete all entries and insert single entry
+			    @@inventory.runQuery("DELETE FROM nodeToIP WHERE identifier='#{argArray[1]};") {}
+
+			    @@inventory.runQuery("INSERT INTO nodeToIP SET ip='#{argArray[2]}', identifier='#{argArray[1]}';"){}
+			else
+			    # Do a update
+			    @@inventory.runQuery("UPDATE nodeToIP SET ip='#{argArray[2]}' WHERE identifier='#{argArray[1]}';"){}
+			end
+
+			# Update the nodes table to reflect the change of IP
+			ips.each {|ip|
+			    @@inventory.runQuery("UPDATE nodes SET control_ip='#{argArray[2]}' WHERE control_ip='#{ip}';"){}
+	    		    # Create the pubsub node for the new IP
+	    		    @@service.create_pubsub_node("/#{DOMAIN}/#{SYSTEM}/#{ip}")
+			}
+
+			# Send the response to the node
+			item_id = event.first_element("items")\
+				       .first_element("item").attribute("id").to_s
+			response = "OK #{item_id} #{argArray[1]} #{argArray[2]}"
+			item = Jabber::PubSub::Item.new
+			msg = Jabber::Message.new(nil, response);
+			item.add(msg)
+
+			@@service.publish_to_node("/#{DOMAIN}/#{SYSTEM}/#{@@user}", item)
+		    end
+		end
+	    rescue Exception => ex
+		error "Failed to process message: '#{message}' - Error: '#{ex}'"
+		return
+	    end
+	end
+    end
+end #class
+
+=begin DEBUGGING
+begin
+    DiscoverPubSubCommunicator.instance.start()
+
+    if (ARGV.size >= 3) 
+	# Send a test DISCOVER message #
+
+	# First, connect to the PubSub Server
+	service = OmfPubSubService.new(ARGV[0], ARGV[1], ARGV[2])
+
+	queue = Queue.new
+
+	service.add_event_callback { |event|
+	    queue << event
+	}
+
+	service.join_pubsub_node("/Domain/System/discoverd")
+
+	# Second, send the DISCOVER message
+	message = "DISCOVER [1,1] 192.168.3.128"
+	item = Jabber::PubSub::Item.new
+	msg = Jabber::Message.new(nil, message)
+	item.add(msg)
+	service.publish_to_node("/Domain/System/discoverd", item)
+
+	# Third, receive the response
+	while event = queue.pop
+	    response = event.first_element("items")\
+			    .first_element("item")\
+			    .first_element("message")\
+			    .first_element("body").text
+	    puts "Received response = #{response}"
+	    if (response == "OK #{item.id} [1,1] 192.168.3.128") 
+		puts "DISCOVER command successful"
+		break
+	    end
+	end
+    end
+end
+=end
diff -Nur omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/inventory.rb omf-5.2/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/inventory.rb
--- omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/inventory.rb	2009-10-16 03:46:28.000000000 -0500
+++ omf-5.2/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/inventory.rb	2009-12-05 22:40:33.000000000 -0600
@@ -31,6 +31,7 @@
 
 require 'omf-aggmgr/ogs/gridService'
 require 'omf-aggmgr/ogs_inventory/mySQLInventory'
+require 'omf-aggmgr/ogs_inventory/discoveryCommunicator.rb'
 
 #
 # This class defines a Service to access inventory information about available
@@ -60,6 +61,8 @@
   # These are the current configuration parameters available for testbeds running OMF
   CONST_CONFIG_KEYS = [ 'x_max', 'y_max', 'pxe_url', 'cmc_url', 
                         'frisbee_url', 'frisbee_default_disk', 'saveimage_url', 'oml_url']
+
+
  
   # From Winlab, please fix/clean 
   #
@@ -464,10 +467,17 @@
   #
   # Configure the service through a hash of options
   #
+  # Also starts the discovery service
+  #
   # - config = the Hash holding the config parameters for this service
   #
   def self.configure(config)
     @@config = config
+
+    # XXX This assumes that the domain is 'default', this could cause issues
+    # if the domain is changed
+    DiscoverPubSubCommunicator.instance.start(@@config['testbed']['default'])
+
   end
   
   #
diff -Nur omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/mySQLInventory.rb omf-5.2/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/mySQLInventory.rb
--- omf-5.2.clean/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/mySQLInventory.rb	2009-09-16 23:57:30.000000000 -0500
+++ omf-5.2/omf-aggmgr/ruby/omf-aggmgr/ogs_inventory/mySQLInventory.rb	2009-12-07 00:57:53.000000000 -0600
@@ -104,7 +104,7 @@
       reply=@my.query(query)
       # Check if the SQL result contains anything at all...
       # If so, then call the block of commands to process it
-      if (reply.num_rows() > 0)
+      if (reply != nil && reply.num_rows() > 0)
         reply.each() { |result|
           debug "SQL Reply: '#{result.to_s}'"
           yield(result)
diff -Nur omf-5.2.clean/omf-common/ruby/omf-common/ifconfig/linux/ifconfig.rb omf-5.2/omf-common/ruby/omf-common/ifconfig/linux/ifconfig.rb
--- omf-5.2.clean/omf-common/ruby/omf-common/ifconfig/linux/ifconfig.rb	2009-09-16 23:57:30.000000000 -0500
+++ omf-5.2/omf-common/ruby/omf-common/ifconfig/linux/ifconfig.rb	2009-12-06 01:51:06.000000000 -0600
@@ -1,7 +1,7 @@
 # $Id: ifconfig.rb,v 1.5 2004/02/21 07:44:59 daniel Exp $
 #
 
-require 'lib/ifconfig/common/ifconfig'
+require 'omf-common/ifconfig/common/ifconfig'
 
 class Ifconfig
   #
@@ -18,8 +18,8 @@
     end
     @verbose = verbose
 
-    require 'lib/ifconfig/linux/network_types'
-    require 'lib/ifconfig/linux/interface_types'
+    require 'omf-common/ifconfig/linux/network_types'
+    require 'omf-common/ifconfig/linux/interface_types'
 
     @ifaces = {}
 
diff -Nur omf-5.2.clean/omf-common/ruby/omf-common/ifconfig/linux/interface_types.rb omf-5.2/omf-common/ruby/omf-common/ifconfig/linux/interface_types.rb
--- omf-5.2.clean/omf-common/ruby/omf-common/ifconfig/linux/interface_types.rb	2009-09-16 23:57:30.000000000 -0500
+++ omf-5.2/omf-common/ruby/omf-common/ifconfig/linux/interface_types.rb	2009-12-06 01:51:31.000000000 -0600
@@ -1,7 +1,7 @@
 # $Id: interface_types.rb,v 1.6 2004/02/21 07:44:59 daniel Exp $
 #
 
-require 'lib/ifconfig/common/interface_types'
+require 'omf-common/ifconfig/common/interface_types'
 
 class NetworkAdapter
   # Parse activity on interface
diff -Nur omf-5.2.clean/omf-common/ruby/omf-common/ifconfig/linux/network_types.rb omf-5.2/omf-common/ruby/omf-common/ifconfig/linux/network_types.rb
--- omf-5.2.clean/omf-common/ruby/omf-common/ifconfig/linux/network_types.rb	2009-09-16 23:57:30.000000000 -0500
+++ omf-5.2/omf-common/ruby/omf-common/ifconfig/linux/network_types.rb	2009-12-06 01:51:41.000000000 -0600
@@ -1,7 +1,7 @@
 # $Id: network_types.rb,v 1.4 2004/02/21 07:44:59 daniel Exp $
 #
 
-require 'lib/ifconfig/common/network_types'
+require 'omf-common/ifconfig/common/network_types'
 
 #
 # Base class for IPX and Appletalk classes
diff -Nur omf-5.2.clean/omf-common/ruby/omf-common/ifconfig.rb omf-5.2/omf-common/ruby/omf-common/ifconfig.rb
--- omf-5.2.clean/omf-common/ruby/omf-common/ifconfig.rb	2009-09-16 23:57:30.000000000 -0500
+++ omf-5.2/omf-common/ruby/omf-common/ifconfig.rb	2009-12-06 01:56:04.000000000 -0600
@@ -45,7 +45,7 @@
   #
   def initialize(platform=nil,input=nil,netstat=nil)
     platform = self.get_os unless !platform.nil?
-    require "lib/ifconfig/linux/ifconfig"
+    require "omf-common/ifconfig/linux/ifconfig"
     @cfg = Ifconfig.new(input,netstat)
   end
   def parse
   def <=>(other)
diff -Nur omf-5.2.clean/omf-expctl/ruby/omf-expctl/handlerCommands.rb omf-5.2/omf-expctl/ruby/omf-expctl/handlerCommands.rb
--- omf-5.2.clean/omf-expctl/ruby/omf-expctl/handlerCommands.rb	2009-11-10 00:52:06.000000000 -0600
+++ omf-5.2/omf-expctl/ruby/omf-expctl/handlerCommands.rb	2009-12-08 10:10:07.000000000 -0600
@@ -473,6 +464,21 @@
 end
 
 #
+# Return the control IP of the node at the specified coordinates
+#
+# Used to be able to support nodes with DHCP control IPs
+#
+# - x = x coordinate of node
+# - y = y coordinate of node
+#
+# [Return] a string representation of the IP
+#
+def getControlIP(x, y)
+    node = Node.at!(x, y)
+    return node.getControlIP()
+end
+
+#
 # Return the appropriate antenna (set)
 #
 # - x = x coordinate of the antenna 
diff -Nur omf-5.2.clean/omf-resctl/debian/omf-resctl.ssh-auto-connect.init omf-5.2/omf-resctl/debian/omf-resctl.ssh-auto-connect.init
--- omf-5.2.clean/omf-resctl/debian/omf-resctl.ssh-auto-connect.init	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/omf-resctl/debian/omf-resctl.ssh-auto-connect.init	2009-12-08 23:10:21.000000000 -0600
@@ -0,0 +1,139 @@
+#! /bin/sh
+### BEGIN INIT INFO
+# Provides:          ssh-auto-connect
+# Required-Start:    $syslog $ssh
+# Required-Stop:     $syslog $ssh
+# Default-Start:     2 3 4 5
+# Default-Stop:      0 1 6
+# Short-Description: Initscript for ssh-auto-connect
+# Description:       Connects to the wireless gateway
+### END INIT INFO
+
+# Author: Dan McNulty
+
+# Do NOT "set -e"
+
+# PATH should only include /usr/* if it runs after the mountnfs.sh script
+PATH=/sbin:/usr/sbin:/bin:/usr/bin
+DESC="SSH Auto Connect"
+NAME=ssh-auto-connect
+DAEMON=/usr/sbin/$NAME
+DAEMON_ARGS=""
+PIDFILE=/var/run/$NAME.pid
+SCRIPTNAME=/etc/init.d/$NAME
+IF=eth0 # XXX change to wlan0 if no longer using a bridged setup
+
+# Exit if the package is not installed
+[ -x "$DAEMON" ] || exit 0
+
+# Read configuration variable file if it is present
+[ -r /etc/default/$NAME ] && . /etc/default/$NAME
+
+# Load the VERBOSE setting and other rcS variables
+. /lib/init/vars.sh
+
+# Define LSB log_* functions.
+# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
+. /lib/lsb/init-functions
+
+#
+# Function that starts the daemon/service
+#
+do_start()
+{
+	# XXX uncomment if IF=wlan0
+	# /sbin/ifconfig $IF down
+	# /sbin/ifconfig $IF up || return 2
+	# /sbin/iwconfig $IF essid tsunami || return 2
+	# /sbin/ifconfig $IF up || return 2
+	# /sbin/dhclient3 $IF
+
+	# Return
+	#   0 if daemon has been started
+	#   1 if daemon was already running
+	#   2 if daemon could not be started
+	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
+		|| return 1
+	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
+		$DAEMON_ARGS \
+		|| return 2
+	# Add code here, if necessary, that waits for the process to be ready
+	# to handle requests from services started subsequently which depend
+	# on this one.  As a last resort, sleep for some time.
+}
+
+#
+# Function that stops the daemon/service
+#
+do_stop()
+{
+	# Return
+	#   0 if daemon has been stopped
+	#   1 if daemon was already stopped
+	#   2 if daemon could not be stopped
+	#   other if a failure occurred
+	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
+	RETVAL="$?"
+	[ "$RETVAL" = 2 ] && return 2
+	# Wait for children to finish too if this is a daemon that forks
+	# and if the daemon is only ever run from this initscript.
+	# If the above conditions are not satisfied then add some other code
+	# that waits for the process to drop all resources that could be
+	# needed by services started subsequently.  A last resort is to
+	# sleep for some time.
+	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
+	[ "$?" = 2 ] && return 2
+	# Many daemons don't delete their pidfiles when they exit.
+	rm -f $PIDFILE
+	return "$RETVAL"
+}
+
+case "$1" in
+  start)
+	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
+	do_start
+	case "$?" in
+		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
+		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
+	esac
+	;;
+  stop)
+	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
+	do_stop
+	case "$?" in
+		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
+		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
+	esac
+	;;
+  status)
+       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
+       ;;
+  restart|force-reload)
+	#
+	# If the "reload" option is implemented then remove the
+	# 'force-reload' alias
+	#
+	log_daemon_msg "Restarting $DESC" "$NAME"
+	do_stop
+	case "$?" in
+	  0|1)
+		do_start
+		case "$?" in
+			0) log_end_msg 0 ;;
+			1) log_end_msg 1 ;; # Old process is still running
+			*) log_end_msg 1 ;; # Failed to start
+		esac
+		;;
+	  *)
+	  	# Failed to stop
+		log_end_msg 1
+		;;
+	esac
+	;;
+  *)
+	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
+	exit 3
+	;;
+esac
+
+:
diff -Nur omf-5.2.clean/omf-resctl/etc/omf-resctl/nodeagent.yaml.wisc omf-5.2/omf-resctl/etc/omf-resctl/nodeagent.yaml.wisc
--- omf-5.2.clean/omf-resctl/etc/omf-resctl/nodeagent.yaml.wisc	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/omf-resctl/etc/omf-resctl/nodeagent.yaml.wisc	2009-12-06 23:58:46.000000000 -0600
@@ -0,0 +1,72 @@
+#
+# Copyright (c) 2006-2009 National ICT Australia (NICTA), Australia
+#
+# Copyright (c) 2004-2009 WINLAB, Rutgers University, USA
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+#
+#
+# NOTE: use only 'spaces' to indent !
+# ('tab' indents are not supported by the ruby yaml parser used to read this file)
+#
+# This is the Config file for the NodeAgent4 on the NICTA platform
+#
+---
+nodeagent:
+  # Communication settings 
+  comm:
+
+    # How many seconds can we go without a message from the node handler
+    # before we assume we have lost connectivity and need to reset
+    handler_timeout: 40
+  
+    # Number of consecutive handler timeouts before a 'handler lost'
+    # will be declared.
+    timeout_count: 2
+  
+    # Number of seconds to wait between consecutive RETRY requests
+    retry_interval: 3
+  
+    # Number of seconds between consecutive HEARTBEAT messages
+    heartbeat_interval: 10
+  
+    # Pause between resending previous messages
+    resend_interval: 0.1
+  
+    # Currently the node Agent has the choice between two types 
+    # of Communicators to use to talk to the node Handler: 
+    # i)  Multicast Communicator
+    # ii) TCP Server Communicator
+    #
+    # To enable/disable i) uncomment/comment the following lines
+    #
+    #listen_addr: 224.4.0.1
+    #listen_port: 9006
+    #handler_addr: 224.4.0.2
+    #handler_port: 9002
+    #local_if: eth1 # Control Interface used with Multicast Comm. 
+    #
+    # To enable/disable ii) uncomment/comment the following lines
+    server_port: 9026
+    # local_if: Control Interface used with TCPServer Comm.
+    local_if: eth0
+    xmpp_server: 192.168.3.1
+    # This information is used to identify the node when it doesn't have a static IP
+    discover_pubsub_node: discoverd
+    discover_if: eth0
diff -Nur omf-5.2.clean/omf-resctl/ruby/omf-resctl/autoSSH.rb omf-5.2/omf-resctl/ruby/omf-resctl/autoSSH.rb
--- omf-5.2.clean/omf-resctl/ruby/omf-resctl/autoSSH.rb	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/omf-resctl/ruby/omf-resctl/autoSSH.rb	2009-12-08 19:28:11.000000000 -0600
@@ -0,0 +1,24 @@
+require 'net/ssh'
+
+begin
+    ssh = Net::SSH.start("wireless-gw.cs.wisc.edu", "user", { :password => "password" })
+
+    ssh.open_channel do |ch|
+	# Enable terminal emulation
+	ch.request_pty do |ch, success|
+	    if !success
+		puts "Failed to get pseudo-tty"
+		exit 1
+	    end
+	end
+
+	# Get the wireless gateway to send the login message
+	ch.send_channel_request "shell"
+
+	ch.on_close { puts "Failure: channel closed" }
+    end
+    
+    ssh.loop { true }
+rescue Net::SSH::AuthenticationFailed => ex
+    puts "Authentication Failed: #{ex}"
+end
diff -Nur omf-5.2.clean/omf-resctl/ruby/omf-resctl/omf_agent/agentPubSubCommunicator.rb omf-5.2/omf-resctl/ruby/omf-resctl/omf_agent/agentPubSubCommunicator.rb
--- omf-5.2.clean/omf-resctl/ruby/omf-resctl/omf_agent/agentPubSubCommunicator.rb	2009-09-25 00:42:56.000000000 -0500
+++ omf-5.2/omf-resctl/ruby/omf-resctl/omf_agent/agentPubSubCommunicator.rb	2009-12-07 01:08:31.000000000 -0600
@@ -35,6 +35,8 @@
 #
 require "omf-common/omfPubSubService"
 require 'omf-common/lineSerializer'
+require 'omf-common/ifconfig'
+require 'timeout'
 
 #
 # This class defines a Communicator entity using the Publish/Subscribe paradigm.
@@ -47,6 +49,8 @@
   DOMAIN = "Domain"
   SYSTEM = "System"
   SESSION = "Session"
+  DISCOVER_TIMEOUT = 30
+  DISCOVER_RETRY = 3
 
   include Singleton
   @@instantiated = false
@@ -140,6 +144,67 @@
     # Set some internal attributes...
     @@IPaddr = getControlAddr()
     
+    # Here, need to login Jabber server as the discovery user name
+    # and tell the aggregate manager the control IP for this node
+    begin
+	# Create the Service Helper for the discover user
+	@@service = OmfPubSubService.new(@@IPaddr, "123", jid_suffix)
+   
+	# Set up the event callback
+	discQueue = Queue.new
+	@@service.add_event_callback { |event|
+	    discQueue << event
+	}
+
+	discover_pubsub_node = NodeAgent.instance.config('comm')['discover_pubsub_node']
+	full_path = "/#{DOMAIN}/#{SYSTEM}/#{discover_pubsub_node}"
+	@@service.join_pubsub_node(full_path)
+
+	# Send the initialization command -- see discoveryCommunicator in omf-aggmgr for format
+	cfg = IfconfigWrapper.new.parse
+	mac_addr = cfg[NodeAgent.instance.config('comm')['discover_if']].mac
+	new_ip = @@IPaddr
+	
+	completeDiscovery = false
+	retryCount = 0
+	while !completeDiscovery 
+	    begin
+		status = Timeout::timeout(DISCOVER_TIMEOUT) {
+		    message = "DISCOVER #{mac_addr} #{new_ip}"
+		    item = Jabber::PubSub::Item.new
+		    msg = Jabber::Message.new(nil, message)
+		    item.add(msg)
+		    @@service.publish_to_node(full_path, item)
+		    debug "Sending IP to aggmgr: #{message}"
+
+		    # Receive ACK from initialization command
+		    while event = discQueue.pop
+			response = event.first_element("items")\
+					.first_element("item")\
+					.first_element("message")\
+					.first_element("body").text
+			if (response == "OK #{item.id} #{mac_addr} #{new_ip}") 
+			    completeDiscovery = true
+			    break
+			end
+		    end
+		}
+	    rescue Timeout::Error => terr
+		# Ignore exception and retry
+		retryCount += 1
+		if (retryCount >= 3)
+		    raise terr
+		end
+	    end
+	end
+	
+	# End the discover session
+	@@service.quit
+    rescue Exception => ex
+	error "Failed to complete node discovery with aggmgr '#{jid_suffix}' - Error: '#{ex}'"
+	exit 1
+    end
+
     # Create a Service Helper to interact with the PubSub Server
     begin
       @@service = OmfPubSubService.new(@@IPaddr, "123", jid_suffix)
diff -Nur omf-5.2.clean/omf-resctl/ruby/omf-resctl/omf_agent/nodeAgent.rb omf-5.2/omf-resctl/ruby/omf-resctl/omf_agent/nodeAgent.rb
--- omf-5.2.clean/omf-resctl/ruby/omf-resctl/omf_agent/nodeAgent.rb	2009-11-10 01:11:57.000000000 -0600
+++ omf-5.2/omf-resctl/ruby/omf-resctl/omf_agent/nodeAgent.rb	2009-11-20 00:01:46.000000000 -0600
@@ -54,7 +54,6 @@
   # Our Version Number
   #
   VERSION = OMF::Common::VERSION(__FILE__)
-  OMF_MM_VERSION = OMF::Common::MM_VERSION()
   VERSION_STRING = "OMF Resource Controller #{VERSION}"
   
   # File containing image name
@@ -362,7 +361,7 @@
 
     cfgFile = nil
     @interactive = false
-    @logConfigFile = ENV['NODE_AGENT_LOG'] || "/etc/omf-resctl-#{OMF_MM_VERSION}/nodeagent_log.xml"
+    @logConfigFile = ENV['NODE_AGENT_LOG'] || "/etc/omf-resctl/nodeagent_log.xml"
 
     # --listen-addr --listen-port --handler-addr --handler-port
     opts = OptionParser.new
@@ -444,7 +443,7 @@
     # read optional config file
     if cfgFile.nil?
       name = "nodeagent.yaml"
-      path = ["../etc/omf-resctl/#{name}", "/etc/omf-resctl-#{OMF_MM_VERSION}/#{name}"]
+      path = ["../etc/omf-resctl/#{name}", "/etc/omf-resctl/#{name}"]
       cfgFile = path.detect {|f|
         File.readable?(f)
       }
@@ -589,6 +588,14 @@
   end
 }
 
+IO.popen("lsusb | grep 'Atheros' | wc -l") {|p|
+  if p.gets.to_i > 0
+    require 'omf-resctl/omf_driver/atherosUSB'
+    MObject.info "Have Atheros USB card"
+    AgentCommands::DEV_MAPPINGS['net/w0'] = AtherosDevice.new('net/w0', 'wlan0')
+  end
+}
+
 #
 # Execution Entry point 
 #
diff -Nur omf-5.2.clean/omf-resctl/ruby/omf-resctl/omf_driver/atherosUSB.rb omf-5.2/omf-resctl/ruby/omf-resctl/omf_driver/atherosUSB.rb
--- omf-5.2.clean/omf-resctl/ruby/omf-resctl/omf_driver/atherosUSB.rb	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/omf-resctl/ruby/omf-resctl/omf_driver/atherosUSB.rb	2009-11-20 00:01:48.000000000 -0600
@@ -0,0 +1,104 @@
+#
+# Copyright (c) 2006-2009 National ICT Australia (NICTA), Australia
+#
+# Copyright (c) 2004-2009 WINLAB, Rutgers University, USA
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+#
+#
+# = atherosUSB.rb
+#
+# == Description
+#
+# This file defines the class AtherosUSBDevice which is a sub-class of WirelessDevice.
+#
+require 'omf-resctl/omf_driver/wireless'
+
+#
+# This class represents an AtherosUSB device
+#
+class AtherosUSBDevice < WirelessDevice
+
+  #
+  # Create and set up a new IntelDevice instance
+  #
+  def initialize(logicalName, deviceName)
+    super(logicalName, deviceName)
+    @driver = 'ar5523'
+  end
+
+  #
+  # Return the specific command required to configure a given property of this device.
+  # When a property does not exist for this device, check if it does for its super-class.
+  #
+  # - prop = the property to configure
+  # - value = the value to configure that property to
+  #
+  def getConfigCmd(prop, value)
+
+    case prop
+      when 'type'
+        # 'value' defines type of operation
+        p = case
+          when value == 'a' : 1
+          when value == 'b' : 2
+          when value == 'g' : 3
+          else
+            raise "Unknown type. Should be 'a', 'b', or 'g'."
+        end
+        return "iwpriv #{@deviceName} set_mode #{p}"
+
+      when "mode"
+        # 'value' defines mode of operation
+        p = case
+          when value == 'Managed' : 'managed'
+          when value == 'managed' : 'managed'
+          when value == 'Master' : 'master'
+          when value == 'master' : 'master'
+          when value == 'ad-hoc' : 'ad-hoc'
+          when value == 'adhoc' : 'ad-hoc'
+          when value == 'monitor' : 'monitor'
+          else
+            raise "Unknown mode '#{value}'. Should be 'managed', or 'ad-hoc'."
+        end
+        return "/sbin/iwconfig #{@deviceName} mode #{value} essid dummy channel 1"
+
+      when "essid"
+        @essid = value
+        return "/sbin/iwconfig #{@deviceName} essid #{value}"
+
+      when "frequency"
+        return "/sbin/iwconfig #{@deviceName} freq #{value}"
+
+      when "tx_power"
+        return "/sbin/iwconfig #{@deviceName} txpower #{value}"
+
+      when "rate"
+        return "/sbin/iwconfig #{@deviceName} rate #{value}"
+
+      when "rts"
+        return "/sbin/iwconfig #{@deviceName} rts #{value}"
+
+      when "channel"
+        return "/sbin/iwconfig #{@deviceName} channel #{value}"
+
+    end
+    super
+  end
+end
diff -Nur omf-5.2.clean/omf-resctl/sbin/ssh-auto-connect omf-5.2/omf-resctl/sbin/ssh-auto-connect
--- omf-5.2.clean/omf-resctl/sbin/ssh-auto-connect	1969-12-31 18:00:00.000000000 -0600
+++ omf-5.2/omf-resctl/sbin/ssh-auto-connect	2009-12-08 23:10:21.000000000 -0600
@@ -0,0 +1,38 @@
+#!/bin/sh
+#
+# Copyright (c) 2006-2009 National ICT Australia (NICTA), Australia
+#
+# Copyright (c) 2004-2009 WINLAB, Rutgers University, USA
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+#
+#
+
+APP=omf-resctl/autoSSH.rb
+if [ -e ../$APP ]; then
+   PDIR=..
+else 
+   if [ -e /usr/lib/ruby/1.8/$APP ]; then
+      PDIR=/usr/lib/ruby/1.8
+   else
+      echo "Cannot find the ruby module location ($APP)."
+      exit 1;
+   fi
+fi
+ruby1.8 -I$PDIR $PDIR/$APP $* &
